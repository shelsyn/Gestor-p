{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shelsyn\\\\mio\\\\Gestor-p\\\\src\\\\components\\\\AccountSection\\\\DarkMode.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DarkMode = () => {\n  _s();\n  // Define un estado llamado isCurrentDarkmode para controlar el modo oscuro.\n  const [isCurrentDarkmode, setIsCurrentDarkmode] = useState(() => {\n    // Al inicializar el estado, verifica si el modo oscuro estaba configurado previamente en el almacenamiento local.\n    const darkModeWasSet = localStorage.getItem(\"darkmode\");\n    if (darkModeWasSet) {\n      return true; // Si estaba configurado, establece el modo oscuro como true.\n    } else {\n      return false; // Si no estaba configurado, establece el modo oscuro como false.\n    }\n  });\n\n  // Define una función llamada toggleDarkMode para alternar entre los modos claro y oscuro.\n  const toggleDarkMode = () => {\n    setIsCurrentDarkmode(prevState => !prevState);\n  };\n  useEffect(() => {\n    // Dentro del useEffect, se ajustan las clases CSS y las propiedades según el modo oscuro actual.\n\n    const html = document.querySelector(\"html\");\n    if (isCurrentDarkmode) {\n      var _document$querySelect;\n      // Si el modo oscuro está habilitado:\n      html.classList.add(\"dark\"); // Agrega la clase \"dark\" al elemento HTML.\n      localStorage.setItem(\"darkmode\", \"true\"); // Almacena \"true\" en el almacenamiento local para recordar la elección del usuario.\n      (_document$querySelect = document.querySelector('meta[name=\"theme-color\"]')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.setAttribute(\"content\", \"#0f172a\"); // Cambia el color de tema en la barra de navegación, en este caso, a un tono oscuro.\n    } else {\n      var _document$querySelect2;\n      // Si el modo oscuro está deshabilitado:\n      html.classList.remove(\"dark\"); // Elimina la clase \"dark\" del elemento HTML.\n      localStorage.removeItem(\"darkmode\"); // Elimina la configuración de modo oscuro del almacenamiento local.\n      (_document$querySelect2 = document.querySelector('meta[name=\"theme-color\"]')) === null || _document$querySelect2 === void 0 ? void 0 : _document$querySelect2.setAttribute(\"content\", \"#e2e8f0\"); // Cambia el color de tema en la barra de navegación, en este caso, a un tono claro.\n    }\n  }, [isCurrentDarkmode]); // Este efecto se ejecuta cuando cambia el valor de isCurrentDarkmode.\n\n  return (\n    /*#__PURE__*/\n    // Renderiza un botón que permite al usuario cambiar entre los modos claro y oscuro.\n    _jsxDEV(\"button\", {\n      className: \"mt-8 text-left flex items-center justify-between\",\n      onClick: toggleDarkMode,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"dark:text-slate-200\",\n        children: \"Modo oscuro\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-10 h-5 bg-slate-200 rounded-full px-0.5 dark:bg-slate-900 relative flex items-center dark:justify-end\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-4 h-4 rounded-full bg-pink-400 absolute\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(DarkMode, \"SQ+cQq80Ub68eeud7Ju3EbJalwE=\");\n_c = DarkMode;\nexport default _c2 = /*#__PURE__*/React.memo(DarkMode); // Exporta el componente DarkMode como un componente memoizado para mejorar el rendimiento.\nvar _c, _c2;\n$RefreshReg$(_c, \"DarkMode\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useEffect","useState","DarkMode","isCurrentDarkmode","setIsCurrentDarkmode","darkModeWasSet","localStorage","getItem","toggleDarkMode","prevState","html","document","querySelector","classList","add","setItem","setAttribute","remove","removeItem","memo"],"sources":["C:/Users/shelsyn/mio/Gestor-p/src/components/AccountSection/DarkMode.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst DarkMode: React.FC = () => {\r\n  // Define un estado llamado isCurrentDarkmode para controlar el modo oscuro.\r\n  const [isCurrentDarkmode, setIsCurrentDarkmode] = useState<boolean>(() => {\r\n    // Al inicializar el estado, verifica si el modo oscuro estaba configurado previamente en el almacenamiento local.\r\n    const darkModeWasSet = localStorage.getItem(\"darkmode\");\r\n    if (darkModeWasSet) {\r\n      return true; // Si estaba configurado, establece el modo oscuro como true.\r\n    } else {\r\n      return false; // Si no estaba configurado, establece el modo oscuro como false.\r\n    }\r\n  });\r\n\r\n  // Define una función llamada toggleDarkMode para alternar entre los modos claro y oscuro.\r\n  const toggleDarkMode = () => {\r\n    setIsCurrentDarkmode((prevState) => !prevState);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Dentro del useEffect, se ajustan las clases CSS y las propiedades según el modo oscuro actual.\r\n\r\n    const html = document.querySelector<HTMLHtmlElement>(\"html\")!;\r\n\r\n    if (isCurrentDarkmode) {\r\n      // Si el modo oscuro está habilitado:\r\n      html.classList.add(\"dark\"); // Agrega la clase \"dark\" al elemento HTML.\r\n      localStorage.setItem(\"darkmode\", \"true\"); // Almacena \"true\" en el almacenamiento local para recordar la elección del usuario.\r\n      document\r\n        .querySelector('meta[name=\"theme-color\"]')\r\n        ?.setAttribute(\"content\", \"#0f172a\"); // Cambia el color de tema en la barra de navegación, en este caso, a un tono oscuro.\r\n    } else {\r\n      // Si el modo oscuro está deshabilitado:\r\n      html.classList.remove(\"dark\"); // Elimina la clase \"dark\" del elemento HTML.\r\n      localStorage.removeItem(\"darkmode\"); // Elimina la configuración de modo oscuro del almacenamiento local.\r\n      document\r\n        .querySelector('meta[name=\"theme-color\"]')\r\n        ?.setAttribute(\"content\", \"#e2e8f0\"); // Cambia el color de tema en la barra de navegación, en este caso, a un tono claro.\r\n    }\r\n  }, [isCurrentDarkmode]); // Este efecto se ejecuta cuando cambia el valor de isCurrentDarkmode.\r\n\r\n  return (\r\n    // Renderiza un botón que permite al usuario cambiar entre los modos claro y oscuro.\r\n    <button\r\n      className=\"mt-8 text-left flex items-center justify-between\"\r\n      onClick={toggleDarkMode}\r\n    >\r\n      <span className=\"dark:text-slate-200\">Modo oscuro</span>\r\n      <div className=\"w-10 h-5 bg-slate-200 rounded-full px-0.5 dark:bg-slate-900 relative flex items-center dark:justify-end\">\r\n        <div className=\"w-4 h-4 rounded-full bg-pink-400 absolute\"></div>\r\n      </div>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default React.memo(DarkMode); // Exporta el componente DarkMode como un componente memoizado para mejorar el rendimiento.\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAEnD,MAAMC,QAAkB,GAAG,MAAM;EAAA;EAC/B;EACA,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGH,QAAQ,CAAU,MAAM;IACxE;IACA,MAAMI,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACvD,IAAIF,cAAc,EAAE;MAClB,OAAO,IAAI,CAAC,CAAC;IACf,CAAC,MAAM;MACL,OAAO,KAAK,CAAC,CAAC;IAChB;EACF,CAAC,CAAC;;EAEF;EACA,MAAMG,cAAc,GAAG,MAAM;IAC3BJ,oBAAoB,CAAEK,SAAS,IAAK,CAACA,SAAS,CAAC;EACjD,CAAC;EAEDT,SAAS,CAAC,MAAM;IACd;;IAEA,MAAMU,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAkB,MAAM,CAAE;IAE7D,IAAIT,iBAAiB,EAAE;MAAA;MACrB;MACAO,IAAI,CAACG,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;MAC5BR,YAAY,CAACS,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;MAC1C,yBAAAJ,QAAQ,CACLC,aAAa,CAAC,0BAA0B,CAAC,0DAD5C,sBAEII,YAAY,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;IAC1C,CAAC,MAAM;MAAA;MACL;MACAN,IAAI,CAACG,SAAS,CAACI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;MAC/BX,YAAY,CAACY,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;MACrC,0BAAAP,QAAQ,CACLC,aAAa,CAAC,0BAA0B,CAAC,2DAD5C,uBAEII,YAAY,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;IAC1C;EACF,CAAC,EAAE,CAACb,iBAAiB,CAAC,CAAC,CAAC,CAAC;;EAEzB;IAAA;IACE;IACA;MACE,SAAS,EAAC,kDAAkD;MAC5D,OAAO,EAAEK,cAAe;MAAA,wBAExB;QAAM,SAAS,EAAC,qBAAqB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAmB,eACxD;QAAK,SAAS,EAAC,yGAAyG;QAAA,uBACtH;UAAK,SAAS,EAAC;QAA2C;UAAA;UAAA;UAAA;QAAA;MAAO;QAAA;QAAA;QAAA;MAAA,QAC7D;IAAA;MAAA;MAAA;MAAA;IAAA;EACC;AAEb,CAAC;AAAC,GAnDIN,QAAkB;AAAA,KAAlBA,QAAkB;AAqDxB,kCAAeH,KAAK,CAACoB,IAAI,CAACjB,QAAQ,CAAC,CAAC,CAAC;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}