{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\n// Se importa el tipo Task desde un módulo de interfaces.\nimport { useAppSelector } from \"../../store/hooks\"; // Se importa el hook useAppSelector desde el almacenamiento de la aplicación.\n\nconst useTodayTasks = () => {\n  _s();\n  // Utiliza useAppSelector para obtener las tareas del estado de la aplicación.\n  const tasks = useAppSelector(state => state.tasks.tasks);\n  const [todaysTasks, setTodaysTasks] = useState([]);\n\n  // Obtiene la fecha actual y extrae el año, mes y día.\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1; // Se suma 1 porque los meses en JavaScript se indexan desde 0.\n  const day = date.getDate();\n\n  // Formatea la fecha actual en el formato \"AAAA-MM-DD\".\n  const dateTimeFormat = `${year}-${month.toString().padStart(2, \"0\")}-${day.toString().padStart(2, \"0\")}`;\n  useEffect(() => {\n    // Filtra las tareas que tienen la fecha igual a la fecha actual en dateTimeFormat.\n    let filteredTasks = tasks.filter(task => task.date === dateTimeFormat);\n\n    // Actualiza el estado todaysTasks con las tareas filtradas.\n    setTodaysTasks(filteredTasks);\n  }, [dateTimeFormat, tasks]); // El efecto se ejecuta cuando cambia dateTimeFormat o tasks.\n\n  // Devuelve las tareas programadas para el día actual.\n  return todaysTasks;\n};\n_s(useTodayTasks, \"vHxIlPhbyD5kdTkPJwnvr5ZvBq4=\", false, function () {\n  return [useAppSelector];\n});\nexport default useTodayTasks;","map":{"version":3,"names":["useState","useEffect","useAppSelector","useTodayTasks","tasks","state","todaysTasks","setTodaysTasks","date","Date","year","getFullYear","month","getMonth","day","getDate","dateTimeFormat","toString","padStart","filteredTasks","filter","task"],"sources":["C:/Users/shelsyn/mio/Gestor-p/src/components/hooks/useTodayTasks.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { Task } from \"../../interfaces\"; // Se importa el tipo Task desde un módulo de interfaces.\r\nimport { useAppSelector } from \"../../store/hooks\"; // Se importa el hook useAppSelector desde el almacenamiento de la aplicación.\r\n\r\nconst useTodayTasks = (): Task[] => {\r\n  // Utiliza useAppSelector para obtener las tareas del estado de la aplicación.\r\n  const tasks = useAppSelector((state) => state.tasks.tasks);\r\n  const [todaysTasks, setTodaysTasks] = useState<Task[]>([]);\r\n\r\n  // Obtiene la fecha actual y extrae el año, mes y día.\r\n  const date: Date = new Date();\r\n  const year: number = date.getFullYear();\r\n  const month: number = date.getMonth() + 1; // Se suma 1 porque los meses en JavaScript se indexan desde 0.\r\n  const day: number = date.getDate();\r\n\r\n  // Formatea la fecha actual en el formato \"AAAA-MM-DD\".\r\n  const dateTimeFormat = `${year}-${month.toString().padStart(2, \"0\")}-${day\r\n    .toString()\r\n    .padStart(2, \"0\")}`;\r\n\r\n  useEffect(() => {\r\n    // Filtra las tareas que tienen la fecha igual a la fecha actual en dateTimeFormat.\r\n    let filteredTasks: Task[] = tasks.filter(\r\n      (task: Task) => task.date === dateTimeFormat\r\n    );\r\n\r\n    // Actualiza el estado todaysTasks con las tareas filtradas.\r\n    setTodaysTasks(filteredTasks);\r\n  }, [dateTimeFormat, tasks]); // El efecto se ejecuta cuando cambia dateTimeFormat o tasks.\r\n\r\n  // Devuelve las tareas programadas para el día actual.\r\n  return todaysTasks;\r\n};\r\n\r\nexport default useTodayTasks;\r\n\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACF;AACzC,SAASC,cAAc,QAAQ,mBAAmB,CAAC,CAAC;;AAEpD,MAAMC,aAAa,GAAG,MAAc;EAAA;EAClC;EACA,MAAMC,KAAK,GAAGF,cAAc,CAAEG,KAAK,IAAKA,KAAK,CAACD,KAAK,CAACA,KAAK,CAAC;EAC1D,MAAM,CAACE,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAS,EAAE,CAAC;;EAE1D;EACA,MAAMQ,IAAU,GAAG,IAAIC,IAAI,EAAE;EAC7B,MAAMC,IAAY,GAAGF,IAAI,CAACG,WAAW,EAAE;EACvC,MAAMC,KAAa,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;EAC3C,MAAMC,GAAW,GAAGN,IAAI,CAACO,OAAO,EAAE;;EAElC;EACA,MAAMC,cAAc,GAAI,GAAEN,IAAK,IAAGE,KAAK,CAACK,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGJ,GAAG,CACvEG,QAAQ,EAAE,CACVC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC;EAErBjB,SAAS,CAAC,MAAM;IACd;IACA,IAAIkB,aAAqB,GAAGf,KAAK,CAACgB,MAAM,CACrCC,IAAU,IAAKA,IAAI,CAACb,IAAI,KAAKQ,cAAc,CAC7C;;IAED;IACAT,cAAc,CAACY,aAAa,CAAC;EAC/B,CAAC,EAAE,CAACH,cAAc,EAAEZ,KAAK,CAAC,CAAC,CAAC,CAAC;;EAE7B;EACA,OAAOE,WAAW;AACpB,CAAC;AAAC,GA5BIH,aAAa;EAAA,QAEHD,cAAc;AAAA;AA4B9B,eAAeC,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}