{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { collection, addDoc, getDocs } from \"firebase/firestore\";\nimport { db } from \"../services/app\";\nconst defaultTasks = [{\n  title: \"Tarea 1\",\n  important: true,\n  description: \"Hacer el proyecto para aplicaciones de escritorio\",\n  date: \"2023-09-20\",\n  dir: \"Principal\",\n  completed: true,\n  id: \"t2\"\n}, {\n  title: \"Tarea 2\",\n  important: false,\n  description: \"Taller de infraestructura\",\n  date: \"2023-09-21\",\n  dir: \"Principal\",\n  completed: false,\n  id: \"t3\"\n}];\nconst getProduct = async () => {\n  try {\n    const querySnapshot = await getDocs(collection(db, 'task'));\n    querySnapshot.forEach(doc => {\n      defaultTasks.push({\n        ...doc.data(),\n        id: doc.id\n      });\n    });\n  } catch (error) {}\n};\ngetProduct();\nconst getSavedDirectories = () => {\n  let dirList = [];\n  if (localStorage.getItem(\"directories\")) {\n    dirList = JSON.parse(localStorage.getItem(\"directories\"));\n    const mainDirExists = dirList.some(dir => dir === \"Main\");\n    if (!mainDirExists) {\n      dirList.push(\"Main\");\n    }\n  } else {\n    dirList.push(\"Principales\");\n  }\n  if (localStorage.getItem(\"tasks\")) {\n    const savedTasksList = JSON.parse(localStorage.getItem(\"tasks\"));\n    let dirNotSaved = [];\n    savedTasksList.forEach(task => {\n      if (!dirList.includes(task.dir)) {\n        if (!dirNotSaved.includes(task.dir)) {\n          dirNotSaved.push(task.dir);\n        }\n      }\n    });\n    dirList = [...dirList, ...dirNotSaved];\n  }\n  return dirList;\n};\nconst initialState = {\n  tasks: localStorage.getItem(\"tasks\") ? JSON.parse(localStorage.getItem(\"tasks\")) : defaultTasks,\n  directories: getSavedDirectories()\n};\nconst tasksSlice = createSlice({\n  name: \"tareas\",\n  initialState: initialState,\n  reducers: {\n    addNewTask(state, action) {\n      state.tasks = [action.payload, ...state.tasks];\n      const createTask = async () => {\n        try {\n          const docRef = await addDoc(collection(db, \"task\"), action.payload);\n          console.log(\"Document written with ID: \", docRef.id);\n        } catch (e) {\n          console.error(\"Error adding document: \", e);\n        }\n      };\n      createTask();\n    },\n    removeTask(state, action) {\n      const newTasksList = state.tasks.filter(task => task.id !== action.payload);\n      state.tasks = newTasksList;\n    },\n    markAsImportant(state, action) {\n      const newTaskFavorited = state.tasks.find(task => task.id === action.payload);\n      newTaskFavorited.important = !newTaskFavorited.important;\n    },\n    editTask(state, action) {\n      const taskId = action.payload.id;\n      const newTaskEdited = state.tasks.find(task => task.id === taskId);\n      const indexTask = state.tasks.indexOf(newTaskEdited);\n      state.tasks[indexTask] = action.payload;\n    },\n    toggleTaskCompleted(state, action) {\n      const taskId = action.payload;\n      const currTask = state.tasks.find(task => task.id === taskId);\n      currTask.completed = !currTask.completed;\n    },\n    deleteAllData(state) {\n      state.tasks = [];\n      state.directories = [\"Principal\"];\n    },\n    createDirectory(state, action) {\n      const newDirectory = action.payload;\n      const directoryAlreadyExists = state.directories.includes(newDirectory);\n      if (directoryAlreadyExists) return;\n      state.directories = [newDirectory, ...state.directories];\n    },\n    deleteDirectory(state, action) {\n      const dirName = action.payload;\n      state.directories = state.directories.filter(dir => dir !== dirName);\n      state.tasks = state.tasks.filter(task => task.dir !== dirName);\n    },\n    editDirectoryName(state, action) {\n      const newDirName = action.payload.newDirName;\n      const previousDirName = action.payload.previousDirName;\n      const directoryAlreadyExists = state.directories.includes(newDirName);\n      if (directoryAlreadyExists) return;\n      const dirIndex = state.directories.indexOf(previousDirName);\n      state.directories[dirIndex] = newDirName;\n      state.tasks.forEach(task => {\n        if (task.dir === previousDirName) {\n          task.dir = newDirName;\n        }\n      });\n    }\n  }\n});\nexport const tasksActions = tasksSlice.actions;\nexport default tasksSlice.reducer;\nexport const tasksMiddleware = store => next => action => {\n  const nextAction = next(action);\n  const actionChangeOnlyDirectories = tasksActions.createDirectory.match(action);\n  const isADirectoryAction = action.type.toLowerCase().includes(\"directory\");\n  if (action.type.startsWith(\"tasks/\") && !actionChangeOnlyDirectories) {\n    const tasksList = store.getState().tasks.tasks;\n    localStorage.setItem(\"tasks\", JSON.stringify(tasksList));\n  }\n  if (action.type.startsWith(\"tasks/\") && isADirectoryAction) {\n    const dirList = store.getState().tasks.directories;\n    localStorage.setItem(\"directories\", JSON.stringify(dirList));\n  }\n  if (tasksActions.deleteAllData.match(action)) {\n    localStorage.removeItem(\"Tareas\");\n    localStorage.removeItem(\"Directorio\");\n    localStorage.removeItem(\"darkmode\");\n  }\n  if (tasksActions.removeTask.match(action)) {\n    console.log(JSON.parse(localStorage.getItem(\"tasks\")));\n    if (localStorage.getItem(\"tasks\")) {\n      const localStorageTasks = JSON.parse(localStorage.getItem(\"tasks\"));\n      if (localStorageTasks.length === 0) {\n        localStorage.removeItem(\"tasks\");\n      }\n    }\n  }\n  return nextAction;\n};","map":{"version":3,"names":["createSlice","collection","addDoc","getDocs","db","defaultTasks","title","important","description","date","dir","completed","id","getProduct","querySnapshot","forEach","doc","push","data","error","getSavedDirectories","dirList","localStorage","getItem","JSON","parse","mainDirExists","some","savedTasksList","dirNotSaved","task","includes","initialState","tasks","directories","tasksSlice","name","reducers","addNewTask","state","action","payload","createTask","docRef","console","log","e","removeTask","newTasksList","filter","markAsImportant","newTaskFavorited","find","editTask","taskId","newTaskEdited","indexTask","indexOf","toggleTaskCompleted","currTask","deleteAllData","createDirectory","newDirectory","directoryAlreadyExists","deleteDirectory","dirName","editDirectoryName","newDirName","previousDirName","dirIndex","tasksActions","actions","reducer","tasksMiddleware","store","next","nextAction","actionChangeOnlyDirectories","match","isADirectoryAction","type","toLowerCase","startsWith","tasksList","getState","setItem","stringify","removeItem","localStorageTasks","length"],"sources":["C:/Users/shelsyn/mio/Gestor-p/src/store/Tasks.store.tsx"],"sourcesContent":["import {\r\n  Action,\r\n  createSlice,\r\n  Dispatch,\r\n  MiddlewareAPI,\r\n  PayloadAction,\r\n} from \"@reduxjs/toolkit\";\r\nimport { collection, addDoc, getDocs } from \"firebase/firestore\"; \r\nimport { Task } from \"../interfaces\";\r\nimport { db } from \"../services/app\";\r\n\r\nconst defaultTasks: Task[] = [\r\n  {\r\n    title: \"Tarea 1\",\r\n    important: true,\r\n    description: \"Hacer el proyecto para aplicaciones de escritorio\",\r\n    date: \"2023-09-20\",\r\n    dir: \"Principal\",\r\n    completed: true,\r\n    id: \"t2\",\r\n  },\r\n \r\n  {\r\n    title: \"Tarea 2\",\r\n    important: false,\r\n    description: \"Taller de infraestructura\",\r\n    date: \"2023-09-21\",\r\n    dir: \"Principal\",\r\n    completed: false,\r\n    id: \"t3\",\r\n  },\r\n];\r\n\r\n\r\n  const getProduct = async() => {\r\n    try {\r\n      const querySnapshot = await getDocs(collection(db, 'task'));\r\n      querySnapshot.forEach((doc: any) => {\r\n        defaultTasks.push({ ...doc.data(), id: doc.id });\r\n      });\r\n    } catch (error) {\r\n    }\r\n  }\r\n  getProduct();\r\n\r\n\r\nconst getSavedDirectories = (): string[] => {\r\n  let dirList: string[] = [];\r\n  if (localStorage.getItem(\"directories\")) {\r\n    dirList = JSON.parse(localStorage.getItem(\"directories\")!);\r\n    const mainDirExists = dirList.some((dir: string) => dir === \"Main\");\r\n    if (!mainDirExists) {\r\n      dirList.push(\"Main\");\r\n    }\r\n  } else {\r\n    dirList.push(\"Principales\");\r\n  }\r\n\r\n  if (localStorage.getItem(\"tasks\")) {\r\n    const savedTasksList = JSON.parse(localStorage.getItem(\"tasks\")!);\r\n    let dirNotSaved: string[] = [];\r\n    savedTasksList.forEach((task: Task) => {\r\n      if (!dirList.includes(task.dir)) {\r\n        if (!dirNotSaved.includes(task.dir)) {\r\n          dirNotSaved.push(task.dir);\r\n        }\r\n      }\r\n    });\r\n    dirList = [...dirList, ...dirNotSaved];\r\n  }\r\n  return dirList;\r\n};\r\n\r\nconst initialState: {\r\n  tasks: Task[];\r\n  directories: string[];\r\n} = {\r\n  tasks: localStorage.getItem(\"tasks\")\r\n    ? JSON.parse(localStorage.getItem(\"tasks\")!)\r\n    : defaultTasks,\r\n  directories: getSavedDirectories(),\r\n};\r\n\r\nconst tasksSlice = createSlice({\r\n  name: \"tareas\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    addNewTask(state, action: PayloadAction<Task>) {\r\n     state.tasks = [action.payload, ...state.tasks];\r\n     \r\n     const createTask = async ()  => {\r\n      try {\r\n        const docRef = await addDoc(collection(db, \"task\"), action.payload);\r\n        console.log(\"Document written with ID: \", docRef.id);\r\n      } catch (e) {\r\n        console.error(\"Error adding document: \", e);\r\n      }\r\n     }\r\n\r\n     createTask()\r\n\r\n    },\r\n    removeTask(state, action) {\r\n      const newTasksList = state.tasks.filter(\r\n        (task) => task.id !== action.payload\r\n      );\r\n      state.tasks = newTasksList;\r\n    },\r\n    markAsImportant(state, action: PayloadAction<string>) {\r\n      const newTaskFavorited = state.tasks.find(\r\n        (task) => task.id === action.payload\r\n      );\r\n      newTaskFavorited!.important = !newTaskFavorited!.important;\r\n    },\r\n    editTask(state, action: PayloadAction<Task>) {\r\n      const taskId = action.payload.id;\r\n\r\n      const newTaskEdited: Task = state.tasks.find(\r\n        (task: Task) => task.id === taskId\r\n      )!;\r\n      const indexTask = state.tasks.indexOf(newTaskEdited);\r\n      state.tasks[indexTask] = action.payload;\r\n    },\r\n    toggleTaskCompleted(state, action: PayloadAction<string>) {\r\n      const taskId = action.payload;\r\n\r\n      const currTask = state.tasks.find((task) => task.id === taskId)!;\r\n\r\n      currTask.completed = !currTask.completed;\r\n    },\r\n    deleteAllData(state) {\r\n      state.tasks = [];\r\n      state.directories = [\"Principal\"];\r\n    },\r\n    createDirectory(state, action: PayloadAction<string>) {\r\n      const newDirectory: string = action.payload;\r\n      const directoryAlreadyExists = state.directories.includes(newDirectory);\r\n      if (directoryAlreadyExists) return;\r\n      state.directories = [newDirectory, ...state.directories];\r\n    },\r\n    deleteDirectory(state, action: PayloadAction<string>) {\r\n      const dirName = action.payload;\r\n\r\n      state.directories = state.directories.filter((dir) => dir !== dirName);\r\n      state.tasks = state.tasks.filter((task) => task.dir !== dirName);\r\n    },\r\n    editDirectoryName(\r\n      state,\r\n      action: PayloadAction<{ newDirName: string; previousDirName: string }>\r\n    ) {\r\n      const newDirName: string = action.payload.newDirName;\r\n      const previousDirName: string = action.payload.previousDirName;\r\n      const directoryAlreadyExists = state.directories.includes(newDirName);\r\n      if (directoryAlreadyExists) return;\r\n\r\n      const dirIndex = state.directories.indexOf(previousDirName);\r\n\r\n      state.directories[dirIndex] = newDirName;\r\n      state.tasks.forEach((task) => {\r\n        if (task.dir === previousDirName) {\r\n          task.dir = newDirName;\r\n        }\r\n      });\r\n    },\r\n  },\r\n});\r\n\r\nexport const tasksActions = tasksSlice.actions;\r\nexport default tasksSlice.reducer;\r\n\r\nexport const tasksMiddleware =\r\n  (store: MiddlewareAPI) => (next: Dispatch) => (action: Action) => {\r\n    const nextAction = next(action);\r\n    const actionChangeOnlyDirectories =\r\n      tasksActions.createDirectory.match(action);\r\n\r\n    const isADirectoryAction: boolean = action.type\r\n      .toLowerCase()\r\n      .includes(\"directory\");\r\n\r\n    if (action.type.startsWith(\"tasks/\") && !actionChangeOnlyDirectories) {\r\n      const tasksList = store.getState().tasks.tasks;\r\n      localStorage.setItem(\"tasks\", JSON.stringify(tasksList));\r\n    }\r\n    if (action.type.startsWith(\"tasks/\") && isADirectoryAction) {\r\n      const dirList = store.getState().tasks.directories;\r\n      localStorage.setItem(\"directories\", JSON.stringify(dirList));\r\n    }\r\n\r\n    if (tasksActions.deleteAllData.match(action)) {\r\n      localStorage.removeItem(\"Tareas\");\r\n      localStorage.removeItem(\"Directorio\");\r\n      localStorage.removeItem(\"darkmode\");\r\n    }\r\n\r\n    if (tasksActions.removeTask.match(action)) {\r\n      console.log(JSON.parse(localStorage.getItem(\"tasks\")!));\r\n      if (localStorage.getItem(\"tasks\")) {\r\n        const localStorageTasks = JSON.parse(localStorage.getItem(\"tasks\")!);\r\n        if (localStorageTasks.length === 0) {\r\n          localStorage.removeItem(\"tasks\");\r\n        }\r\n      }\r\n    }\r\n    return nextAction;\r\n  };\r\n"],"mappings":"AAAA,SAEEA,WAAW,QAIN,kBAAkB;AACzB,SAASC,UAAU,EAAEC,MAAM,EAAEC,OAAO,QAAQ,oBAAoB;AAEhE,SAASC,EAAE,QAAQ,iBAAiB;AAEpC,MAAMC,YAAoB,GAAG,CAC3B;EACEC,KAAK,EAAE,SAAS;EAChBC,SAAS,EAAE,IAAI;EACfC,WAAW,EAAE,mDAAmD;EAChEC,IAAI,EAAE,YAAY;EAClBC,GAAG,EAAE,WAAW;EAChBC,SAAS,EAAE,IAAI;EACfC,EAAE,EAAE;AACN,CAAC,EAED;EACEN,KAAK,EAAE,SAAS;EAChBC,SAAS,EAAE,KAAK;EAChBC,WAAW,EAAE,2BAA2B;EACxCC,IAAI,EAAE,YAAY;EAClBC,GAAG,EAAE,WAAW;EAChBC,SAAS,EAAE,KAAK;EAChBC,EAAE,EAAE;AACN,CAAC,CACF;AAGC,MAAMC,UAAU,GAAG,YAAW;EAC5B,IAAI;IACF,MAAMC,aAAa,GAAG,MAAMX,OAAO,CAACF,UAAU,CAACG,EAAE,EAAE,MAAM,CAAC,CAAC;IAC3DU,aAAa,CAACC,OAAO,CAAEC,GAAQ,IAAK;MAClCX,YAAY,CAACY,IAAI,CAAC;QAAE,GAAGD,GAAG,CAACE,IAAI,EAAE;QAAEN,EAAE,EAAEI,GAAG,CAACJ;MAAG,CAAC,CAAC;IAClD,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOO,KAAK,EAAE,CAChB;AACF,CAAC;AACDN,UAAU,EAAE;AAGd,MAAMO,mBAAmB,GAAG,MAAgB;EAC1C,IAAIC,OAAiB,GAAG,EAAE;EAC1B,IAAIC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,EAAE;IACvCF,OAAO,GAAGG,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAE;IAC1D,MAAMG,aAAa,GAAGL,OAAO,CAACM,IAAI,CAAEjB,GAAW,IAAKA,GAAG,KAAK,MAAM,CAAC;IACnE,IAAI,CAACgB,aAAa,EAAE;MAClBL,OAAO,CAACJ,IAAI,CAAC,MAAM,CAAC;IACtB;EACF,CAAC,MAAM;IACLI,OAAO,CAACJ,IAAI,CAAC,aAAa,CAAC;EAC7B;EAEA,IAAIK,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE;IACjC,MAAMK,cAAc,GAAGJ,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAE;IACjE,IAAIM,WAAqB,GAAG,EAAE;IAC9BD,cAAc,CAACb,OAAO,CAAEe,IAAU,IAAK;MACrC,IAAI,CAACT,OAAO,CAACU,QAAQ,CAACD,IAAI,CAACpB,GAAG,CAAC,EAAE;QAC/B,IAAI,CAACmB,WAAW,CAACE,QAAQ,CAACD,IAAI,CAACpB,GAAG,CAAC,EAAE;UACnCmB,WAAW,CAACZ,IAAI,CAACa,IAAI,CAACpB,GAAG,CAAC;QAC5B;MACF;IACF,CAAC,CAAC;IACFW,OAAO,GAAG,CAAC,GAAGA,OAAO,EAAE,GAAGQ,WAAW,CAAC;EACxC;EACA,OAAOR,OAAO;AAChB,CAAC;AAED,MAAMW,YAGL,GAAG;EACFC,KAAK,EAAEX,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,GAChCC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAE,GAC1ClB,YAAY;EAChB6B,WAAW,EAAEd,mBAAmB;AAClC,CAAC;AAED,MAAMe,UAAU,GAAGnC,WAAW,CAAC;EAC7BoC,IAAI,EAAE,QAAQ;EACdJ,YAAY,EAAEA,YAAY;EAC1BK,QAAQ,EAAE;IACRC,UAAU,CAACC,KAAK,EAAEC,MAA2B,EAAE;MAC9CD,KAAK,CAACN,KAAK,GAAG,CAACO,MAAM,CAACC,OAAO,EAAE,GAAGF,KAAK,CAACN,KAAK,CAAC;MAE9C,MAAMS,UAAU,GAAG,YAAa;QAC/B,IAAI;UACF,MAAMC,MAAM,GAAG,MAAMzC,MAAM,CAACD,UAAU,CAACG,EAAE,EAAE,MAAM,CAAC,EAAEoC,MAAM,CAACC,OAAO,CAAC;UACnEG,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEF,MAAM,CAAC/B,EAAE,CAAC;QACtD,CAAC,CAAC,OAAOkC,CAAC,EAAE;UACVF,OAAO,CAACzB,KAAK,CAAC,yBAAyB,EAAE2B,CAAC,CAAC;QAC7C;MACD,CAAC;MAEDJ,UAAU,EAAE;IAEb,CAAC;IACDK,UAAU,CAACR,KAAK,EAAEC,MAAM,EAAE;MACxB,MAAMQ,YAAY,GAAGT,KAAK,CAACN,KAAK,CAACgB,MAAM,CACpCnB,IAAI,IAAKA,IAAI,CAAClB,EAAE,KAAK4B,MAAM,CAACC,OAAO,CACrC;MACDF,KAAK,CAACN,KAAK,GAAGe,YAAY;IAC5B,CAAC;IACDE,eAAe,CAACX,KAAK,EAAEC,MAA6B,EAAE;MACpD,MAAMW,gBAAgB,GAAGZ,KAAK,CAACN,KAAK,CAACmB,IAAI,CACtCtB,IAAI,IAAKA,IAAI,CAAClB,EAAE,KAAK4B,MAAM,CAACC,OAAO,CACrC;MACDU,gBAAgB,CAAE5C,SAAS,GAAG,CAAC4C,gBAAgB,CAAE5C,SAAS;IAC5D,CAAC;IACD8C,QAAQ,CAACd,KAAK,EAAEC,MAA2B,EAAE;MAC3C,MAAMc,MAAM,GAAGd,MAAM,CAACC,OAAO,CAAC7B,EAAE;MAEhC,MAAM2C,aAAmB,GAAGhB,KAAK,CAACN,KAAK,CAACmB,IAAI,CACzCtB,IAAU,IAAKA,IAAI,CAAClB,EAAE,KAAK0C,MAAM,CAClC;MACF,MAAME,SAAS,GAAGjB,KAAK,CAACN,KAAK,CAACwB,OAAO,CAACF,aAAa,CAAC;MACpDhB,KAAK,CAACN,KAAK,CAACuB,SAAS,CAAC,GAAGhB,MAAM,CAACC,OAAO;IACzC,CAAC;IACDiB,mBAAmB,CAACnB,KAAK,EAAEC,MAA6B,EAAE;MACxD,MAAMc,MAAM,GAAGd,MAAM,CAACC,OAAO;MAE7B,MAAMkB,QAAQ,GAAGpB,KAAK,CAACN,KAAK,CAACmB,IAAI,CAAEtB,IAAI,IAAKA,IAAI,CAAClB,EAAE,KAAK0C,MAAM,CAAE;MAEhEK,QAAQ,CAAChD,SAAS,GAAG,CAACgD,QAAQ,CAAChD,SAAS;IAC1C,CAAC;IACDiD,aAAa,CAACrB,KAAK,EAAE;MACnBA,KAAK,CAACN,KAAK,GAAG,EAAE;MAChBM,KAAK,CAACL,WAAW,GAAG,CAAC,WAAW,CAAC;IACnC,CAAC;IACD2B,eAAe,CAACtB,KAAK,EAAEC,MAA6B,EAAE;MACpD,MAAMsB,YAAoB,GAAGtB,MAAM,CAACC,OAAO;MAC3C,MAAMsB,sBAAsB,GAAGxB,KAAK,CAACL,WAAW,CAACH,QAAQ,CAAC+B,YAAY,CAAC;MACvE,IAAIC,sBAAsB,EAAE;MAC5BxB,KAAK,CAACL,WAAW,GAAG,CAAC4B,YAAY,EAAE,GAAGvB,KAAK,CAACL,WAAW,CAAC;IAC1D,CAAC;IACD8B,eAAe,CAACzB,KAAK,EAAEC,MAA6B,EAAE;MACpD,MAAMyB,OAAO,GAAGzB,MAAM,CAACC,OAAO;MAE9BF,KAAK,CAACL,WAAW,GAAGK,KAAK,CAACL,WAAW,CAACe,MAAM,CAAEvC,GAAG,IAAKA,GAAG,KAAKuD,OAAO,CAAC;MACtE1B,KAAK,CAACN,KAAK,GAAGM,KAAK,CAACN,KAAK,CAACgB,MAAM,CAAEnB,IAAI,IAAKA,IAAI,CAACpB,GAAG,KAAKuD,OAAO,CAAC;IAClE,CAAC;IACDC,iBAAiB,CACf3B,KAAK,EACLC,MAAsE,EACtE;MACA,MAAM2B,UAAkB,GAAG3B,MAAM,CAACC,OAAO,CAAC0B,UAAU;MACpD,MAAMC,eAAuB,GAAG5B,MAAM,CAACC,OAAO,CAAC2B,eAAe;MAC9D,MAAML,sBAAsB,GAAGxB,KAAK,CAACL,WAAW,CAACH,QAAQ,CAACoC,UAAU,CAAC;MACrE,IAAIJ,sBAAsB,EAAE;MAE5B,MAAMM,QAAQ,GAAG9B,KAAK,CAACL,WAAW,CAACuB,OAAO,CAACW,eAAe,CAAC;MAE3D7B,KAAK,CAACL,WAAW,CAACmC,QAAQ,CAAC,GAAGF,UAAU;MACxC5B,KAAK,CAACN,KAAK,CAAClB,OAAO,CAAEe,IAAI,IAAK;QAC5B,IAAIA,IAAI,CAACpB,GAAG,KAAK0D,eAAe,EAAE;UAChCtC,IAAI,CAACpB,GAAG,GAAGyD,UAAU;QACvB;MACF,CAAC,CAAC;IACJ;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMG,YAAY,GAAGnC,UAAU,CAACoC,OAAO;AAC9C,eAAepC,UAAU,CAACqC,OAAO;AAEjC,OAAO,MAAMC,eAAe,GACzBC,KAAoB,IAAMC,IAAc,IAAMnC,MAAc,IAAK;EAChE,MAAMoC,UAAU,GAAGD,IAAI,CAACnC,MAAM,CAAC;EAC/B,MAAMqC,2BAA2B,GAC/BP,YAAY,CAACT,eAAe,CAACiB,KAAK,CAACtC,MAAM,CAAC;EAE5C,MAAMuC,kBAA2B,GAAGvC,MAAM,CAACwC,IAAI,CAC5CC,WAAW,EAAE,CACblD,QAAQ,CAAC,WAAW,CAAC;EAExB,IAAIS,MAAM,CAACwC,IAAI,CAACE,UAAU,CAAC,QAAQ,CAAC,IAAI,CAACL,2BAA2B,EAAE;IACpE,MAAMM,SAAS,GAAGT,KAAK,CAACU,QAAQ,EAAE,CAACnD,KAAK,CAACA,KAAK;IAC9CX,YAAY,CAAC+D,OAAO,CAAC,OAAO,EAAE7D,IAAI,CAAC8D,SAAS,CAACH,SAAS,CAAC,CAAC;EAC1D;EACA,IAAI3C,MAAM,CAACwC,IAAI,CAACE,UAAU,CAAC,QAAQ,CAAC,IAAIH,kBAAkB,EAAE;IAC1D,MAAM1D,OAAO,GAAGqD,KAAK,CAACU,QAAQ,EAAE,CAACnD,KAAK,CAACC,WAAW;IAClDZ,YAAY,CAAC+D,OAAO,CAAC,aAAa,EAAE7D,IAAI,CAAC8D,SAAS,CAACjE,OAAO,CAAC,CAAC;EAC9D;EAEA,IAAIiD,YAAY,CAACV,aAAa,CAACkB,KAAK,CAACtC,MAAM,CAAC,EAAE;IAC5ClB,YAAY,CAACiE,UAAU,CAAC,QAAQ,CAAC;IACjCjE,YAAY,CAACiE,UAAU,CAAC,YAAY,CAAC;IACrCjE,YAAY,CAACiE,UAAU,CAAC,UAAU,CAAC;EACrC;EAEA,IAAIjB,YAAY,CAACvB,UAAU,CAAC+B,KAAK,CAACtC,MAAM,CAAC,EAAE;IACzCI,OAAO,CAACC,GAAG,CAACrB,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAE,CAAC;IACvD,IAAID,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE;MACjC,MAAMiE,iBAAiB,GAAGhE,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAE;MACpE,IAAIiE,iBAAiB,CAACC,MAAM,KAAK,CAAC,EAAE;QAClCnE,YAAY,CAACiE,UAAU,CAAC,OAAO,CAAC;MAClC;IACF;EACF;EACA,OAAOX,UAAU;AACnB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}