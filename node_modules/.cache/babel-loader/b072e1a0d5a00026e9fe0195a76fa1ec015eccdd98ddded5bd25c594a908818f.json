{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\n\n// Define la función useVisibility que toma un array de elementos HTMLElement y una función opcional fnClose.\nconst useVisibility = (elements, fnClose) => {\n  _s();\n  // Utiliza el hook useState para crear un estado elementIsVisible que comienza en false.\n  const [elementIsVisible, setElementIsVisible] = useState(false);\n  useEffect(() => {\n    // Define una función checkClick que se ejecutará cuando se haga clic en cualquier parte del documento.\n    const checkClick = e => {\n      if (!elements) return;\n\n      // Comprueba si se hizo clic fuera de todos los elementos en el array.\n      const clickedOutsideElement = elements.every(element => {\n        if (!element) return false;\n        if (e.target !== element && !element.contains(e.target)) {\n          return true;\n        }\n        return false;\n      });\n\n      // Si se hizo clic fuera de los elementos, establece elementIsVisible en false y, si se proporciona fnClose, ejecuta esa función.\n      if (clickedOutsideElement) {\n        setElementIsVisible(false);\n        if (fnClose) fnClose();\n      }\n    };\n\n    // Agrega un event listener para escuchar los clics en el documento.\n    document.addEventListener(\"click\", checkClick);\n\n    // Devuelve una función que removerá el event listener cuando el componente se desmonte o cuando los elementos o fnClose cambien.\n    return () => {\n      document.removeEventListener(\"click\", checkClick);\n    };\n  }, [elements, fnClose]);\n\n  // Define dos funciones: closeElement para ocultar el elemento y showElement para mostrarlo.\n  const closeElement = () => {\n    setElementIsVisible(false);\n  };\n  const showElement = () => {\n    setElementIsVisible(true);\n  };\n\n  // Devuelve un objeto con el estado de visibilidad y las funciones para mostrar y ocultar el elemento.\n  return {\n    elementIsVisible,\n    closeElement,\n    showElement\n  };\n};\n\n// Exporta la función useVisibility como el valor predeterminado del módulo.\n_s(useVisibility, \"jLJ32TnRF9PR6z0lsRuviu6+PMo=\");\nexport default useVisibility;","map":{"version":3,"names":["useEffect","useState","useVisibility","elements","fnClose","elementIsVisible","setElementIsVisible","checkClick","e","clickedOutsideElement","every","element","target","contains","document","addEventListener","removeEventListener","closeElement","showElement"],"sources":["C:/Users/shelsyn/mio/Gestor-p/src/components/hooks/useVisibility.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\n// Define la función useVisibility que toma un array de elementos HTMLElement y una función opcional fnClose.\r\nconst useVisibility = (elements: HTMLElement[], fnClose?: () => void) => {\r\n  // Utiliza el hook useState para crear un estado elementIsVisible que comienza en false.\r\n  const [elementIsVisible, setElementIsVisible] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    // Define una función checkClick que se ejecutará cuando se haga clic en cualquier parte del documento.\r\n    const checkClick = (e: MouseEvent) => {\r\n      if (!elements) return;\r\n\r\n      // Comprueba si se hizo clic fuera de todos los elementos en el array.\r\n      const clickedOutsideElement = elements.every((element) => {\r\n        if (!element) return false;\r\n        if (\r\n          e.target !== element &&\r\n          !element.contains(e.target as HTMLElement)\r\n        ) {\r\n          return true;\r\n        }\r\n        return false;\r\n      });\r\n\r\n      // Si se hizo clic fuera de los elementos, establece elementIsVisible en false y, si se proporciona fnClose, ejecuta esa función.\r\n      if (clickedOutsideElement) {\r\n        setElementIsVisible(false);\r\n        if (fnClose) fnClose();\r\n      }\r\n    };\r\n\r\n    // Agrega un event listener para escuchar los clics en el documento.\r\n    document.addEventListener(\"click\", checkClick);\r\n\r\n    // Devuelve una función que removerá el event listener cuando el componente se desmonte o cuando los elementos o fnClose cambien.\r\n    return () => {\r\n      document.removeEventListener(\"click\", checkClick);\r\n    };\r\n  }, [elements, fnClose]);\r\n\r\n  // Define dos funciones: closeElement para ocultar el elemento y showElement para mostrarlo.\r\n  const closeElement = () => {\r\n    setElementIsVisible(false);\r\n  };\r\n\r\n  const showElement = () => {\r\n    setElementIsVisible(true);\r\n  };\r\n\r\n  // Devuelve un objeto con el estado de visibilidad y las funciones para mostrar y ocultar el elemento.\r\n  return { elementIsVisible, closeElement, showElement };\r\n};\r\n\r\n// Exporta la función useVisibility como el valor predeterminado del módulo.\r\nexport default useVisibility;\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAE3C;AACA,MAAMC,aAAa,GAAG,CAACC,QAAuB,EAAEC,OAAoB,KAAK;EAAA;EACvE;EACA,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGL,QAAQ,CAAU,KAAK,CAAC;EAExED,SAAS,CAAC,MAAM;IACd;IACA,MAAMO,UAAU,GAAIC,CAAa,IAAK;MACpC,IAAI,CAACL,QAAQ,EAAE;;MAEf;MACA,MAAMM,qBAAqB,GAAGN,QAAQ,CAACO,KAAK,CAAEC,OAAO,IAAK;QACxD,IAAI,CAACA,OAAO,EAAE,OAAO,KAAK;QAC1B,IACEH,CAAC,CAACI,MAAM,KAAKD,OAAO,IACpB,CAACA,OAAO,CAACE,QAAQ,CAACL,CAAC,CAACI,MAAM,CAAgB,EAC1C;UACA,OAAO,IAAI;QACb;QACA,OAAO,KAAK;MACd,CAAC,CAAC;;MAEF;MACA,IAAIH,qBAAqB,EAAE;QACzBH,mBAAmB,CAAC,KAAK,CAAC;QAC1B,IAAIF,OAAO,EAAEA,OAAO,EAAE;MACxB;IACF,CAAC;;IAED;IACAU,QAAQ,CAACC,gBAAgB,CAAC,OAAO,EAAER,UAAU,CAAC;;IAE9C;IACA,OAAO,MAAM;MACXO,QAAQ,CAACE,mBAAmB,CAAC,OAAO,EAAET,UAAU,CAAC;IACnD,CAAC;EACH,CAAC,EAAE,CAACJ,QAAQ,EAAEC,OAAO,CAAC,CAAC;;EAEvB;EACA,MAAMa,YAAY,GAAG,MAAM;IACzBX,mBAAmB,CAAC,KAAK,CAAC;EAC5B,CAAC;EAED,MAAMY,WAAW,GAAG,MAAM;IACxBZ,mBAAmB,CAAC,IAAI,CAAC;EAC3B,CAAC;;EAED;EACA,OAAO;IAAED,gBAAgB;IAAEY,YAAY;IAAEC;EAAY,CAAC;AACxD,CAAC;;AAED;AAAA,GAlDMhB,aAAa;AAmDnB,eAAeA,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}